这个问题的贪心策略是：为了使得剩下的数字最小，我们需要尽可能地保证高位的数字尽可能小。

具体实现时，我们从左到右遍历原数字，对于每一个位置，我们判断是否可以删除它，使得剩下的数字最小。
如果当前数字大于下一个数字，那么删除当前数字后，下一个数字就会变成更高的位置，使得剩下的数字更小，所以我们删除当前数字。
如果当前数字小于等于下一个数字，那么我们就保留当前数字。

这个过程可以使用一个栈来实现，我们遍历原数字，对于每一个数字，当栈不为空，且栈顶元素大于当前元素，且我们还可以删除数字时，我们就不断地弹出栈顶元素。
然后，无论栈是否为空，我们都将当前元素压入栈中。最后，如果我们还可以删除数字，那么我们就从栈顶开始继续删除，直到我们不能再删除数字。

这个贪心策略的正确性在于，对于每一个位置，我们都做出了在当时看来最优的选择，而且这个局部最优的选择也将导致全局最优的结果

这个问题的贪心策略是：为了使得剩下的数字最小，我们需要尽可能地保证高位的数字尽可能小。

具体实现时，我们从左到右遍历原数字，对于每一个位置，我们判断是否可以删除它，使得剩下的数字最小。如果当前数字大于下一个数字，那么删除当前数字后，下一个数字就会变成更高的位置，使得剩下的数字更小，所以我们删除当前数字。如果当前数字小于等于下一个数字，那么我们就保留当前数字。

这个过程可以使用一个栈来实现，我们遍历原数字，对于每一个数字，当栈不为空，且栈顶元素大于当前元素，且我们还可以删除数字时，我们就不断地弹出栈顶元素。然后，无论栈是否为空，我们都将当前元素压入栈中。最后，如果我们还可以删除数字，那么我们就从栈顶开始继续删除，直到我们不能再删除数字。


#include <iostream>
using namespace std;

int main() {
    int n;
    cin >> n;
    long long a = 1, b = 1, c = 1;
    for (int i = 3; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    if (n == 1 || n == 2) {
        cout << 1 << endl;
    } else {
        cout << c << endl;
    }
    return 0;
}
/*
好的,我重新解释一下这段代码,没有提到斐波那契数列:

1. 输入一个整数N

2. 定义三个整数变量a、b、c,初始化为1 

3. 使用for循环,i从3迭代到N

4. 每次循环中,计算:
   c = a + b
   a = b
   b = c

5. 这实际上是在计算一个数字序列:
   第1项为1,第2项为1
   从第3项开始,每一项为前两项的和

6. 循环结束后,c的值就是这个序列的第N项

7. 根据N的值判断输出:
   如果N<=2,输出1
   否则输出c

8. 所以代码通过迭代的方式求出了这个特定数字序列的第N项

9. 关键是利用前两项推导出当前项,并维护前两项变量

10. 没有使用斐波那契数列的明确概念

11. 仅根据题目的输入和输出要求,通过迭代求出特定序列的第N项

综上,这段代码主要是利用迭代和变量存储的方法,根据题目要求计算出一个数字序列的第N项。
代码逻辑上独立于斐波那契数列,仅关注 输入和输出的对应关系,而不依赖任何特定数列性质。
*/
#include <iostream>
using namespace std;

int main() {
    int n;
    cin >> n;
    int a = 0, i = 1, j = 1;
    while (n > 0) {
        if (n >= i) {
            a += i * j;
            n -= i;
            j++;
            i++;
        } else {
            a += n * j;
            n = 0;
        }
    }
    cout << a << endl;
    return 0;
}

/*
这段代码实现的是求解骑士工资问题的过程。

主要思路是:

1. 使用两个变量i和j分别记录当前的天数和每天得到的金币数。初始值i=1,j=1。

2. 使用一个while循环,当天数n>0时循环:

3. 如果n大于等于i,表示现在是连续i天每天得到j枚金币的阶段,则计算这一阶段总金币数i*j,减去i天的n,j加1准备进入下一阶段,i也加1。

4. 如果n小于i,表示现在是最后一阶段,直接计算n*j即可,并将n置0退出循环。

5. 最后累加过程中计算的金币总数就是结果。

例如输入n=6,执行过程是:

i=1, j=1, n=6 >= i, 算1*1=1, n=5
i=2, j=2, n=5 >= i, 算2*2=4, n=3  
i=3, j=3, n=3 >= i, 算3*3=9, n=0
循环结束,累加1+4+9=14

所以输出结果为14。

这个代码通过控制i和j的变化来模拟骑士收入的变化规律,每次计算一段时间内的金币数,累加求和得到最后的总金币数。利用了while循环和条件判断来实现。
i和j的变化规律是: i从1开始，每次加1，j从1开始，每次加1，直到i天结束，然后i加1，j也加1，继续下一阶段。
*/
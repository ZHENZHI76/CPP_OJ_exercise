#include <iostream>
using namespace std;

int main() {
    int a, b, c;
    cin >> a >> b >> c;
    int d = 0;
    for (int i = 0; i <= c / a; i++) {
        if ((c - a * i) % b == 0) {
            d++;
        }
    }
    cout << d << endl;
    return 0;
}

/*
这段代码是解决让等式成立的组合数问题的:

1. 输入a,b,c代表等式 ax+by=c

2. 设置一个计数变量d初始化为0

3. 遍历x的所有可能取值:x从0到c/a,因为x最大取值是c/a。

4. 对每个x值,计算y的值:y = (c - a * x) / b。这里利用求余数判断y是否是整数。

5. 如果y是整数,说明找到了一个可行解,d计数加1。

6. 遍历结束后,d的值即为可行解的个数,也就是组合数。

关键是通过遍历x的可能取值,反推求y的取值,判断y是否为整数,来判定该组x、y是否是可行解。

遍历范围控制在:

x ∈ [0, c/a]

y = (c - ax) / b

最后d统计结果即为组合数。

这样通过一重循环加条件判断,实现了求解组合数的问题。
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
x ∈ [0, c/a] 表示x的取值范围是0到c/a之间的整数,包括0和c/a。

这里使用了区间表示法来表示变量x的可能取值:

[0, c/a] 表示一个闭区间,包含端点0和c/a。

∈ 表示"属于",x ∈ [0, c/a] 就是表示x属于[0, c/a]这个范围,即x的取值在这个范围内。

所以 x ∈ [0, c/a] 表示变量x可以取值为0,1,2,...一直到c/a,这些整数都在范围[0, c/a]内。

INTERVAL表示法常用于表示一个变量的取值范围,特别是在描述算法时需要指明变量的遍历范围或者约束条件。

利用这种表示法可以更加精确、清晰地表达变量的取值限制。
*/
#include <iostream>
using namespace std;

int scnt = 0; // 初始化系统数为0。scnt代表当前已经使用的系统数量。

for (int i = 1; i <= n; i++) { // 遍历所有的导弹。i代表当前正在处理的导弹的索引。

    int j = 0; // j用来遍历当前所有的系统。

    for (j = 0; j < scnt; j++) { // 遍历所有的系统。j代表当前正在处理的系统的索引。

        if (s[j] >= a[i]) { // 如果当前系统可以拦截当前导弹。s[j]代表当前系统能拦截的最低高度，a[i]代表当前导弹的高度。

            s[j] = a[i]; // 更新系统的最低拦截高度为当前导弹的高度。这是因为我们希望每个系统能拦截尽可能多的导弹，所以我们应该让系统拦截尽可能低的导弹。

            break; // 跳出循环。因为我们已经找到了一个可以拦截当前导弹的系统，所以我们不需要再检查其他的系统。
        }
    }

    if (j == scnt) { // 如果没有找到可以拦截当前导弹的系统。这是因为如果有系统可以拦截当前导弹，那么在内层循环中我们会跳出循环，所以j不会等于scnt。

        s[scnt++] = a[i]; // 新增一个系统来拦截当前导弹。我们将新系统能拦截的最低高度设置为当前导弹的高度，并将系统数增加1。
    }
}

cout << scnt << endl; // 输出系统数。这是我们的最终结果，代表我们最少需要多少个系统才能拦截所有的导弹。